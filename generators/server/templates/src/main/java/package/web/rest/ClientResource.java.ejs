package <%= packageName %>.web.rest.comm;

import com.cmi.tic.config.webClient.AccessToken;
import com.cmi.tic.config.webClient.WebClientConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import java.util.HashMap;

@RestController
@RequestMapping("/api")
public class ClientResource<%= capitalizeServerName %> {

    private final Logger log = LoggerFactory.getLogger(ClientResource<%= capitalizeServerName %>.class);

    @Autowired
    private WebClientConfig webClient;

    @Autowired
    private AccessToken oAuthToken;

    private static final String TOKEN_TYPE = "Bearer ";


    @GetMapping("/services/<%= serverName %>")
    public ResponseEntity<?> getClient() {
        try {
            String accessToken = oAuthToken.getToken();
            if(accessToken.isEmpty() || accessToken.isBlank() ){
                log.error("No access token found");
                throw new NullPointerException();
            }
            ResponseSpec result = webClient
                .serviceWebClient()
                .build()
                .get()
                .uri("http://<%= serverName %>/api/services/<%= serverName %>")
                .header(HttpHeaders.AUTHORIZATION,TOKEN_TYPE + accessToken)
                .retrieve();
          result.bodyToMono(HashMap.class).subscribe(service->{
            log.info(service.get("server").toString() );
          });
          return new ResponseEntity<>(HttpStatus.OK);
        } catch (Exception e) {
            log.error(e.getLocalizedMessage());
        }
        return null;
    }
}
